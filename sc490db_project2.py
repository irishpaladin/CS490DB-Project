# -*- coding: utf-8 -*-
"""SC490DB-Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UyxTsua5ce88qJOttohAz8gurg66_ZWz
"""

# Importing required libraries
from google.colab import drive
import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np
drive.mount('/content/grive')

cd grive/My\ Drive/2Year1Term/CS490DB/CS490DB-Project/data

data = pd.read_csv("kc_house_data.csv")

data.isnull().sum()

data.dtypes

data['date'] = pd.to_datetime(data['date'])
data['bathrooms'] = data['bathrooms'].astype('int')
data['floors'] = data['floors'].astype('int')
data['price'] = data['price'].astype('int')

#getting signifficant data
data["house_age"] = data["date"].dt.year - data['yr_built']
data['renovated'] = data['yr_renovated'].apply(lambda yr: 0 if yr == 0 else 1)

data.drop('date', axis=1, inplace=True)
data.drop('yr_renovated', axis=1, inplace=True)
data.drop('yr_built', axis=1, inplace=True)

data.set_index(data['id'], inplace=True)
data.drop('id', axis=1, inplace=True)
data.head()



correlation = data.corr(method='pearson')
columns = correlation.nlargest(17, 'price').index

import seaborn as sns
correlation_map = np.corrcoef(data[columns].values.T)
sns.set(font_scale=0.7)
heatmap = sns.heatmap(correlation_map, cbar=True, annot=True, square=True, fmt='.2f', yticklabels=columns.values, xticklabels=columns.values)

plt.show()

corr = data.corr()
fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(corr,cmap='coolwarm', vmin=-1, vmax=1)
fig.colorbar(cax)
ticks = np.arange(0,len(data.columns),1)
ax.set_xticks(ticks)
plt.xticks(rotation=90)
ax.set_yticks(ticks)
ax.set_xticklabels(data.columns)
ax.set_yticklabels(data.columns)
plt.show()

from sklearn.model_selection import train_test_split


from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge


from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

y = data['price']
X = data.drop('price', axis = 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)

pred = model.predict(X_test)
print("The R2 square value of Random Forest is :", r2_score(y_test, pred)*100)

model = LinearRegression()
model.fit(X_train, y_train)

pred = model.predict(X_test)
print("The R2 square value of Linear is :", r2_score(y_test, pred)*100)

model = Ridge(alpha=1.0)
model.fit(X_train, y_train)

pred = model.predict(X_test)
print("The R2 square value of Ridge is :", r2_score(y_test, pred)*100)

from sklearn.preprocessing import PolynomialFeatures
X_train_ = PolynomialFeatures(degree=2, include_bias=False).fit_transform(X_train)
model = LinearRegression().fit(X_train_,y_train)
X_test_= PolynomialFeatures(degree=2, include_bias=False).fit_transform(X_test)
pred = model.predict(X_test_)
print("The R2 square value of Ridge is :", r2_score(y_test, pred)*100)

from sklearn.linear_model import ElasticNet
model = ElasticNet()
model.fit(X_train, y_train)

pred = model.predict(X_test)
print("The R2 square value of Ridge is :", r2_score(y_test, pred)*100)

from sklearn.ensemble import GradientBoostingRegressor
model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,max_depth=1, random_state=0, loss='ls').fit(X_train, y_train)
pred = model.predict(X_test)
print("The R2 square value of Ridge is :", r2_score(y_test, pred)*100)

